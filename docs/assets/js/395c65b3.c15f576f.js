(self.webpackChunkskat_docs=self.webpackChunkskat_docs||[]).push([[188],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return f}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=r,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||i;return n?a.createElement(d,o(o({ref:t},c),{},{components:n})):a.createElement(d,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9398:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),o={sidebar_position:2},l={unversionedId:"references/config",id:"version-1.0.0/references/config",isDocsHomePage:!1,title:"Config",description:"The dotfile configuration is how SKAT knows about the project, where it's templates are, mapping of templates names and",source:"@site/versioned_docs/version-1.0.0/references/config.md",sourceDirName:"references",slug:"/references/config",permalink:"/skat-js/docs/references/config",editUrl:"https://github.com/dandro/skat-js/versioned_docs/version-1.0.0/references/config.md",version:"1.0.0",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"version-1.0.0/tutorialSidebar",previous:{title:"Reference - Overview",permalink:"/skat-js/docs/references/overview"},next:{title:"Templates",permalink:"/skat-js/docs/references/templates"}},s=[{value:"templates",id:"templates",children:[]},{value:"filenameSeparator (Optional)",id:"filenameseparator-optional",children:[]},{value:"output",id:"output",children:[]},{value:"Example Config File",id:"example-config-file",children:[]}],p={toc:s};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The dotfile configuration is how SKAT knows about the project, where it's templates are, mapping of templates names and\noutputs and more."),(0,i.kt)("p",null,"To get started, create a file called ",(0,i.kt)("inlineCode",{parentName:"p"},".skatrc"),". Although it does not matter where this file is you must execute all SKAT\ncli commands in the directory this file is in so for this guide we'll assume it is at the root of your project. It must\nhave the following properties:"),(0,i.kt)("h3",{id:"templates"},"templates"),(0,i.kt)("p",null,"This is a relative path from current working directory to the directory where the templates are. It can be anywhere in\nthe project but in this documentation we'll assume it is ",(0,i.kt)("inlineCode",{parentName:"p"},".skat/templates"),"."),(0,i.kt)("h3",{id:"filenameseparator-optional"},"filenameSeparator (Optional)"),(0,i.kt)("p",null,"This is a character to separate parts of your file's name. For example if your filename is\n",(0,i.kt)("inlineCode",{parentName:"p"},"page.view.js")," then your ",(0,i.kt)("inlineCode",{parentName:"p"},"filenameSeparator")," is '.'. This is useful to group related files by their name. This means\nthat if you have a ",(0,i.kt)("inlineCode",{parentName:"p"},"page")," template which is made out of 3 files,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=Page",title:"Page"},"page.view.js\npage.types.js\npage.spec.js\n")),(0,i.kt)("p",null,"You can call skat with ",(0,i.kt)("inlineCode",{parentName:"p"},"-w page -n home")," and all 3 files will be copied, and the result will be"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=Filename Separator",title:"Filename",Separator:!0},"home.view.js\nhome.types.js\nhome.spec.js\n")),(0,i.kt)("p",null,"Or if you want a module instead pass the ",(0,i.kt)("inlineCode",{parentName:"p"},"-m")," arg, like so ",(0,i.kt)("inlineCode",{parentName:"p"},"-w page -n home -m")," and skat will create a directory with\nthe name passed while keeping the suffixes for files copied."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=Filename Separator",title:"Filename",Separator:!0},"home/\n    view.js\n    types.js\n    spec.js\n")),(0,i.kt)("h3",{id:"output"},"output"),(0,i.kt)("p",null,"This is a key/value mapping of filename and path. The output of a file is picked by how close it matches the template\nfilename. Output keys can overlap to give some files in a group a different output path. For example, let's assume want\nall your type files in a type directory. Given the following templates:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=Page",title:"Page"},"page.view.js\npage.spec.js\npage.types.js\n")),(0,i.kt)("p",null,"You can have the following output configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=.skatrc",title:".skatrc"},'{\n  "output": {\n    "page": "./pages",\n    "page.type": "./types",\n  }\n}\n')),(0,i.kt)("p",null,"The result will be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=Result",title:"Result"},"/pages\n    page.view.js\n    page.spec.js\n/types\n    page.types.js\n")),(0,i.kt)("h2",{id:"example-config-file"},"Example Config File"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json",metastring:"title=.skatrc",title:".skatrc"},'{\n  "templates": "TEMPLATES_PATH",\n  "filenameSeparator": "FILENAME_SEPARATOR_CHAR", /* --\x3e This is optional. */\n  "output": {\n    "FILENAME_KEY": "RELATIVE_PATH"\n  }\n}\n')))}c.isMDXComponent=!0}}]);